plugins {
  id 'com.diffplug.spotless' version '6.25.0'
}
repositories {

  mavenLocal()
  maven { url 'https://maven.aliyun.com/repository/public/' }
  maven{ url 'https://maven.aliyun.com/nexus/content/repositories/central/' }
  maven{ url 'https://repo.huaweicloud.com/repository/maven/' }
  maven{ url 'https://repo.eclipse.org/content/groups/releases/' }
  mavenCentral()
  maven {
    url 'https://www.jitpack.io'
  }
  maven{ url "https://gh.llkk.cc/https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
}

spotless {
  format 'styling', {
    target '*.json','**/*.json'
    prettier().config(['tabWidth': 2])
  }
  flexmark {
    target '**/*.md'
    flexmark()
  }
}
ext{
  versions = [:]
  libraries = [:]
}
versions.arc = "1.0"
libraries.getArc = { String moduleName ->
  return "com.github.emmmm9o:$moduleName:${versions.arc}"
}
versions.mdt = "1.0"
libraries.getMdt = { String moduleName ->
  return "com.github.emmmm9o.Mindustry:$moduleName:${versions.mdt}"
}
libraries.arcCore = libraries.getArc("arc-core")
libraries.mdtCore = libraries.getMdt("core")
allprojects {
  apply plugin: "java"
  apply plugin: "com.diffplug.spotless"
  apply plugin: 'eclipse'
  version '1.0'
  spotless {
    groovyGradle {
      target '*.gradle'
      greclipse().configFile("${rootProject.projectDir}/greclipse.properties")
    }
    java {
      eclipse()
          .configFile("${rootProject.projectDir}/eclipse-prefs.xml")
      licenseHeader '/* (C) $YEAR */'
    }
  }
  repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven{ url 'https://maven.aliyun.com/nexus/content/repositories/central/' }
    maven{ url 'https://repo.huaweicloud.com/repository/maven/' }
    maven{ url 'https://repo.eclipse.org/content/groups/releases/' }
    mavenCentral()
    maven{ url "https://raw.kkgithub.com/Zelaux/MindustryRepo/master/repository" }

    maven {
      url 'https://www.jitpack.io'
    }
  }

  java {
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
  }

  ext {
    mindustryVersion = 'v146'
    jabelVersion = "0.9.0"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
  }

  tasks.withType(JavaCompile){
    options.compilerArgs.addAll(['--release', '8'])
  }

  dependencies{
    compileOnly libraries.mdtCore
    compileOnly libraries.arcCore

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
  }

  jar{
    duplicatesStrategy='exclude'
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from{
      configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }
    from("build/generated/assets"){
      include "**"
    }
    from("assets/"){
      include "**"
    }
  }
  task jarAndroid{
    dependsOn "jar"

    doLast{

      def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList()).collect{ "--classpath $it.path" }.join(" ")


      "d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
          .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
  }

  task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "oxygen-${base.archivesBaseName}.jar"

    from{
      [
        zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"),
        zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")
      ]
    }

    doLast{
      delete{
        delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
        delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
      }
    }
  }
  configurations.all{
    resolutionStrategy.eachDependency { details ->
      if(details.requested.group == 'com.github.Anuken.Arc'){
        details.useVersion "$mindustryVersion"
      }
    }
  }
}



project(":annotations"){
  tasks.named('deploy').configure {
    enabled = false
  }
  tasks.named('jarAndroid').configure {
    enabled = false
  }
  ext{
    gsonVersion= "2.11.0"
    javapoetVersion ="0.5.0"
  }
  dependencies{
    implementation libraries.arcCore
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.palantir.javapoet:javapoet:$javapoetVersion"
    implementation "com.google.auto.service:auto-service:1.0-rc6"
    implementation "com.palantir.javaformat:palantir-java-format:2.50.0"
    implementation 'com.github.javaparser:javaparser-core:3.26.2'
    annotationProcessor "com.google.auto.service:auto-service:1.0-rc6"
  }
}

project(":utils"){
  ext{
  }
  dependencies{
    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
  }
}
project(":ui"){
  ext{
  }
  dependencies{
    compileOnly project(":utils")
    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
  }
}
project(":core"){
  ext{
  }
  dependencies{
    implementation project(":utils")
    implementation project(":ui")
    compileOnly project(":annotations")
    annotationProcessor project(":annotations")
  }
}


